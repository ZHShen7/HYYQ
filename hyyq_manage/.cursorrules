# HYYQ 约球系统后台管理 - Cursor 规则

## 项目概述
- **项目名称**: 约球系统后台管理系统 (hyyq_manage)
- **技术栈**: React 18 + TypeScript + Vite + Ant Design + Tailwind CSS
- **项目类型**: 管理后台系统
- **用途**: 约球平台的运营管理、用户管理、内容审核等

## 核心技术栈规范

### React + TypeScript
- 使用 React 18 的最新特性和 Hooks
- 所有组件必须使用 TypeScript，严格类型检查
- 优先使用函数组件和 Hooks，避免类组件
- 使用 `React.FC` 类型声明函数组件
- Props 接口必须明确定义，使用 interface 而非 type

### Ant Design 组件库
- 优先使用 Ant Design 组件，保持设计一致性
- 自定义样式时使用 Tailwind CSS 进行补充
- 合理使用 Ant Design 的主题定制功能
- 表格、表单、弹窗等复杂组件优先选择 Ant Design

### Tailwind CSS 样式规范
- **重要**: HTML 和 JSX 中尽量使用 Tailwind CSS 类名
- 避免内联样式 `style={{}}`，改用 Tailwind 类名
- 使用语义化的 Tailwind 类名组合
- 响应式设计使用 Tailwind 的响应式前缀 (`sm:`, `md:`, `lg:`, `xl:`)
- 颜色使用 Tailwind 预设颜色系统
- 间距使用 Tailwind 的间距系统 (`p-4`, `m-2`, `gap-4` 等)

## 代码风格与约定

### 命名规范
- **文件名**: kebab-case (`user-list-page.tsx`)
- **组件名**: PascalCase (`UserListPage`)
- **变量/函数**: camelCase (`getUserList`)
- **常量**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **类型/接口**: PascalCase (`UserListParams`)

### 文件组织结构
```
src/
├── components/     # 公共组件
│   ├── common/     # 通用组件
│   ├── business/   # 业务组件
│   └── layout/     # 布局组件
├── pages/          # 页面组件
├── hooks/          # 自定义 Hooks
├── services/       # API 服务
├── stores/         # 状态管理 (Zustand)
├── utils/          # 工具函数
├── types/          # TypeScript 类型定义
├── constants/      # 常量定义
└── styles/         # 样式文件
```

### 导入规范
- 使用 `import type` 导入类型
- React 相关导入放在最前面
- 第三方库导入放在中间
- 项目内部导入放在最后
- 使用相对路径导入项目内部模块

## 组件开发规范

### 组件结构模板
```tsx
import React, { useState, useEffect } from 'react';
import { Card, Button } from 'antd';
import type { ComponentProps } from '../types';

interface ExampleComponentProps {
  title: string;
  onAction?: () => void;
}

const ExampleComponent: React.FC<ExampleComponentProps> = ({ 
  title, 
  onAction 
}) => {
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // 副作用逻辑
  }, []);

  return (
    <Card className="p-6 shadow-sm border border-gray-200 rounded-lg">
      <h2 className="text-xl font-semibold text-gray-800 mb-4">
        {title}
      </h2>
      <Button 
        type="primary" 
        loading={loading}
        onClick={onAction}
        className="bg-blue-500 hover:bg-blue-600"
      >
        操作按钮
      </Button>
    </Card>
  );
};

export default ExampleComponent;
```

### 页面组件规范
- 每个页面组件必须设置页面标题和面包屑
- 使用 `useAppStore` 管理页面状态
- 页面组件文件名以 `Page.tsx` 结尾
- 页面根元素使用合适的 Tailwind 容器类

## 样式使用规范

### Tailwind CSS 优先
```tsx
// ✅ 推荐：使用 Tailwind 类名
<div className="flex items-center justify-between p-4 bg-white shadow-sm rounded-lg">
  <h1 className="text-2xl font-bold text-gray-900">标题</h1>
  <Button className="bg-blue-500 hover:bg-blue-600 text-white">
    操作
  </Button>
</div>

// ❌ 避免：使用内联样式
<div style={{ 
  display: 'flex', 
  alignItems: 'center', 
  padding: '16px',
  backgroundColor: 'white' 
}}>
```

### 常用样式模式
```tsx
// 卡片容器
className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"

// 按钮样式
className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors"

// 表单容器
className="space-y-4 max-w-md"

// 列表项
className="flex items-center justify-between py-3 border-b border-gray-100 last:border-b-0"

// 响应式网格
className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
```

## 状态管理规范

### Zustand Store
- 使用 Zustand 进行状态管理
- 按功能模块划分 store
- 使用 `persist` 中间件实现持久化
- Store 文件命名：`xxxStore.ts`

### Hooks 使用
- 自定义 Hooks 文件名以 `use` 开头
- 在自定义 Hooks 中封装复杂的状态逻辑
- 避免在组件中直接操作复杂状态

## API 服务规范

### API 调用
- 使用统一的 API 服务层
- 所有 API 调用必须包含错误处理
- 使用 TypeScript 类型约束请求和响应数据
- API 函数命名使用动词开头：`getUserList`, `updateUser`

### 错误处理
```tsx
const handleSubmit = async (values: FormData) => {
  try {
    setLoading(true);
    await updateUser(userId, values);
    message.success('操作成功');
  } catch (error) {
    console.error('操作失败:', error);
    // Ant Design message 会自动显示错误信息
  } finally {
    setLoading(false);
  }
};
```

## 性能优化指南

### React 性能
- 合理使用 `useMemo` 和 `useCallback`
- 避免不必要的重新渲染
- 大列表使用虚拟滚动
- 图片懒加载

### 代码分割
- 路由级别的代码分割
- 大组件的懒加载
- 第三方库按需导入

## 代码质量要求

### TypeScript
- 严格模式开启
- 避免使用 `any` 类型
- 为所有函数参数和返回值定义类型
- 使用泛型提高代码复用性

### 代码整洁
- 函数长度不超过 50 行
- 组件 Props 不超过 10 个
- 使用有意义的变量和函数名
- 及时清理无用代码和注释

### 注释规范
- 复杂业务逻辑必须添加注释
- API 函数添加 JSDoc 注释
- 组件 Props 接口添加注释说明

## 测试要求

### 单元测试
- 关键业务逻辑必须编写测试
- 工具函数 100% 测试覆盖
- 使用 Jest + React Testing Library

### 集成测试
- 重要页面流程测试
- API 集成测试

## 构建和部署

### 构建优化
- 启用 Tree Shaking
- 压缩静态资源
- 合理配置缓存策略

### 环境配置
- 区分开发、测试、生产环境
- 敏感信息使用环境变量
- 构建产物优化

## 开发最佳实践

1. **优先使用 Tailwind CSS** - 除非 Ant Design 组件已有内置样式
2. **类型安全** - 严格使用 TypeScript 类型检查
3. **组件复用** - 抽象公共组件和业务组件
4. **性能意识** - 避免不必要的渲染和网络请求
5. **用户体验** - 适当的加载状态和错误提示
6. **代码整洁** - 保持代码简洁易读
7. **持续优化** - 定期重构和优化代码

## 禁止事项

- ❌ 不要使用内联样式，改用 Tailwind CSS
- ❌ 不要使用 `any` 类型
- ❌ 不要在 useEffect 中缺少依赖项
- ❌ 不要直接修改 props 或 state
- ❌ 不要在组件内部定义组件
- ❌ 不要忽略错误处理
- ❌ 不要使用已废弃的 API 